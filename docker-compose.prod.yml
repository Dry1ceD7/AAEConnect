version: '3.8'

services:
  # Rust Backend Service (High Performance)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: aaeconnect-backend-prod
    ports:
      - '3000:3000'
    environment:
      - RUST_ENV=production
      - DATABASE_URL=postgresql://aaeconnect:${DB_PASSWORD}@postgres:5432/aaeconnect
      - REDIS_URL=redis://redis-cluster:7000
      - MATRIX_HOMESERVER_URL=https://matrix.aae.local
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=info
    volumes:
      - ./backend/config:/app/config:ro
      - backend_logs:/app/logs
    depends_on:
      - postgres
      - redis-cluster
      - timescaledb
    networks:
      - aaeconnect-prod
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # SvelteKit Frontend (Optimized Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: aaeconnect-frontend-prod
    ports:
      - '5173:5173'
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://backend:3000
      - VITE_WS_URL=ws://backend:3000/ws
      - VITE_AAE_THEME=cyan-light-blue-modern
    volumes:
      - frontend_assets:/app/dist
    depends_on:
      - backend
    networks:
      - aaeconnect-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # PostgreSQL + TimescaleDB (High Performance)
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: aaeconnect-postgres-prod
    environment:
      - POSTGRES_DB=aaeconnect
      - POSTGRES_USER=aaeconnect
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - '5432:5432'
    networks:
      - aaeconnect-prod
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U aaeconnect -d aaeconnect']
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Redis Cluster (Sub-millisecond Caching)
  redis-cluster:
    image: redis:7-alpine
    container_name: aaeconnect-redis-cluster-prod
    command: redis-server /usr/local/etc/redis/redis.conf --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - '7000-7005:7000-7005'
    volumes:
      - redis_cluster_data:/data
      - ./docker/redis/cluster.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - aaeconnect-prod
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', '-p', '7000', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # MinIO (S3-Compatible Storage)
  minio:
    image: minio/minio:latest
    container_name: aaeconnect-minio-prod
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_REGION=aae-thailand
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_prod_data:/data
    networks:
      - aaeconnect-prod
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # NGINX (High-Performance Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: aaeconnect-nginx-prod
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - aaeconnect-prod
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Prometheus (Performance Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: aaeconnect-prometheus-prod
    ports:
      - '9090:9090'
    volumes:
      - ./docker/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - aaeconnect-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Grafana (Performance Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: aaeconnect-grafana-prod
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://monitoring.aae.local
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - aaeconnect-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Matrix Synapse (E2E Encryption)
  matrix-synapse:
    image: matrixdotorg/synapse:latest
    container_name: aaeconnect-matrix-prod
    ports:
      - '8008:8008'
      - '8448:8448'
    environment:
      - SYNAPSE_SERVER_NAME=matrix.aae.local
      - SYNAPSE_REPORT_STATS=no
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=matrix_synapse
      - POSTGRES_USER=matrix_user
      - POSTGRES_PASSWORD=${MATRIX_DB_PASSWORD}
    volumes:
      - matrix_prod_data:/data
      - ./docker/matrix/homeserver.yaml:/data/homeserver.yaml:ro
    depends_on:
      - postgres
    networks:
      - aaeconnect-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

volumes:
  postgres_prod_data:
    driver: local
  redis_cluster_data:
    driver: local
  minio_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  matrix_prod_data:
    driver: local
  backend_logs:
    driver: local
  frontend_assets:
    driver: local
  nginx_logs:
    driver: local

networks:
  aaeconnect-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
    driver_opts:
      com.docker.network.bridge.name: aaeconnect-prod

# Production deployment configuration
x-deploy: &default-deploy
  restart_policy:
    condition: unless-stopped
    delay: 5s
    max_attempts: 3
    window: 120s

x-logging: &default-logging
  driver: 'json-file'
  options:
    max-size: '10m'
    max-file: '3'
