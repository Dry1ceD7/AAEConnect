
services:
  # Main application service
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: aaeconnect-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=aaeconnect
      - DB_USER=aaeconnect
      - DB_PASS=aaeconnect123
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    volumes:
      - ./src:/app/src:cached
      - ./docs:/app/docs:cached
      - ./.bmad-core:/app/.bmad-core:cached
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - aaeconnect-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: aaeconnect-postgres
    environment:
      - POSTGRES_DB=aaeconnect
      - POSTGRES_USER=aaeconnect
      - POSTGRES_PASSWORD=aaeconnect123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - aaeconnect-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aaeconnect"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: aaeconnect-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - aaeconnect-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Elasticsearch for search and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: aaeconnect-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - aaeconnect-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: aaeconnect-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - aaeconnect-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: aaeconnect-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - aaeconnect-network
    restart: unless-stopped

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: aaeconnect-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - aaeconnect-network
    restart: unless-stopped

  # NGINX reverse proxy
  nginx:
    image: nginx:alpine
    container_name: aaeconnect-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - aaeconnect-network
    restart: unless-stopped

  # Test environment (isolated)
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: aaeconnect-test
    environment:
      - NODE_ENV=test
      - DB_HOST=test-postgres
      - DB_PORT=5432
      - DB_NAME=aaeconnect_test
      - DB_USER=test_user
      - DB_PASS=test_pass
    volumes:
      - ./src:/app/src:cached
      - ./tests:/app/tests:cached
      - ./.bmad-core:/app/.bmad-core:cached
    depends_on:
      - test-postgres
    networks:
      - test-network
    profiles: ["test"]

  # Test database (isolated)
  test-postgres:
    image: postgres:15-alpine
    container_name: aaeconnect-test-postgres
    environment:
      - POSTGRES_DB=aaeconnect_test
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_pass
    tmpfs:
      - /var/lib/postgresql/data
    networks:
      - test-network
    profiles: ["test"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  aaeconnect-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  test-network:
    driver: bridge
